services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for state management and pub/sub
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service with Dapr
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: ecommerce-frontend
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - DAPR_HTTP_PORT=3500
      - NODE_ENV=development
    depends_on:
      - backend-service
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Dapr sidecar
  frontend-dapr:
    image: "daprio/daprd:1.12.0"
    container_name: ecommerce-frontend-dapr
    command: [
      "./daprd",
      "-app-id", "frontend",
      "-app-port", "3000",
      "-dapr-http-port", "3500",
      "-placement-host-address", "placement:50006",
      "-components-path", "/components",
      "-config", "/configuration/config.yaml"
    ]
    volumes:
      - "./infra/dapr/components:/components"
      - "./infra/dapr/configuration:/configuration"
    depends_on:
      - frontend
      - placement
    network_mode: "service:frontend"

  # Backend Service (consolidated order, inventory, notification)
  backend-service:
    build:
      context: ./src/backend-service
      dockerfile: Dockerfile
    container_name: ecommerce-backend-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { hostname: 'localhost', port: 3001, path: '/health', timeout: 2000 }; const req = http.get(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }); req.on('error', () => process.exit(1)); req.on('timeout', () => { req.destroy(); process.exit(1) });"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service Dapr Sidecar
  backend-service-dapr:
    image: "daprio/daprd:edge"
    container_name: ecommerce-backend-service-dapr
    command: ["./daprd",
      "-app-id", "backend-service",
      "-app-port", "3001",
      "-dapr-http-port", "3501",
      "-dapr-grpc-port", "50001",
      "-components-path", "/components",
      "-config", "/configuration/config.yaml"]
    volumes:
      - "./infra/dapr/components:/components"
      - "./infra/dapr/configuration:/configuration"
    depends_on:
      - backend-service
      - redis
    network_mode: "service:backend-service"

  # Dapr Placement Service
  placement:
    image: "daprio/dapr:1.12.0"
    container_name: ecommerce-dapr-placement
    command: ["./placement", "-port", "50006"]
    ports:
      - "50006:50006"

  # Dapr Dashboard (optional, for development)
  dapr-dashboard:
    image: "daprio/dashboard:latest"
    container_name: ecommerce-dapr-dashboard
    ports:
      - "8081:8080"
    depends_on:
      - redis

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: ecommerce-network